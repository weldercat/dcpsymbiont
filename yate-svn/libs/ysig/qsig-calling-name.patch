--- q931.cpp-no-facility	2016-02-22 14:27:35.000000000 +0500
+++ q931.cpp	2016-02-22 23:11:50.000000000 +0500
@@ -22,7 +22,7 @@
 #include "yatesig.h"
 
 #include <string.h>
-
+#include <assert.h>
 
 using namespace TelEngine;
 
@@ -61,6 +61,8 @@
     dest->addParam(name,tmp);
 }
 
+
+
 // Fill a message header. header parameter must be large enough to store message header
 // Return header length
 static inline u_int8_t fillHeader(u_int8_t* header, ISDNQ931Message* msg,
@@ -97,6 +99,91 @@
     return len;
 }
 
+/* 
+ * helper functions for qsig pdu parsing *
+ *
+ * Taken from wireshark dissector code
+ */
+
+#define BER_CLASS_UNI	0
+#define BER_CLASS_APP	1
+#define BER_CLASS_CON	2
+#define BER_CLASS_PRV	3
+
+ 
+static int get_ber_identifier(const void *data, int offset, int maxlen, u_int8_t *ber_class, bool *pc, u_int32_t *tag, DebugEnabler *dbg)
+{
+	u_int8_t	id, t;
+	u_int8_t	tmp_class = 0;
+	bool		tmp_pc = false;
+	u_int32_t	tmp_tag = 0;
+	
+	assert(maxlen > 0);
+	if (offset < maxlen) {
+		id = ((u_int8_t *)data)[offset];
+		offset++;
+		tmp_class = (id >> 6) & 0x03;
+		tmp_pc = (id >> 5) & 0x01;
+		tmp_tag = id & 0x1F;
+	
+		if (tmp_tag == 0x1f) {
+			tmp_tag = 0;
+			while (offset < maxlen) {
+				t = ((u_int8_t *)data)[offset];
+				offset++;
+				tmp_tag <<= 7;
+				tmp_tag |= t & 0x7f;
+				if (!(t & 0x80)) break;
+			}
+		}
+		if (ber_class) *ber_class = tmp_class;
+		if (pc) *pc = tmp_pc;
+		if (tag) *tag = tmp_tag;
+	}
+	XDebug(dbg,DebugAll, "got ber identifier, offset=%u, raw=0x%0x, class=%u, pc=%u, tag=%u", 
+		offset, id, tmp_class, tmp_pc, tmp_tag);
+	return offset;
+}
+
+/* indefinite length is not supported */	
+static int get_ber_length(const void *data, int offset, int maxlen, u_int32_t *length, bool *ind, DebugEnabler *dbg)
+{
+	u_int8_t	oct, len;
+	u_int32_t	tmp_length = 0;
+	bool		tmp_ind = false;
+	
+	assert(maxlen > 0);
+	
+	if (offset < maxlen) {
+		tmp_length = 0;
+		tmp_ind = false;
+		oct = ((u_int8_t *)data)[offset];
+		offset++;
+		if (!(oct & 0x80)) {
+			tmp_length = oct;
+		} else {
+			len = oct & 0x7f;
+			if (len) {
+				while ((len--) && (offset < maxlen)) {
+					oct = ((u_int8_t *)data)[offset];
+					offset++;
+					tmp_length = (tmp_length << 8) + oct;
+				}
+			} else {
+				tmp_ind = true;
+				tmp_length = 0;
+			}				
+		}		
+	if (length) *length = tmp_length;
+	if (ind) *ind = tmp_ind;
+	}
+	XDebug(dbg,DebugAll, "got ber length, offset=%u, raw=0x%0x, ind=%u, len=%u", 
+		offset, ((u_int8_t *)data)[offset], tmp_ind, tmp_length);
+	return offset;
+}
+
+
+
 /**
  * IEParam
  * Q.931 message IE parameter description
@@ -262,6 +349,7 @@
     ISDNQ931IE* decodeCallIdentity(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
     ISDNQ931IE* decodeCallState(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
     ISDNQ931IE* decodeChannelID(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
+    ISDNQ931IE* decodeFacility(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
     ISDNQ931IE* decodeProgress(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
     ISDNQ931IE* decodeNetFacility(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
     ISDNQ931IE* decodeNotification(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len);
@@ -544,6 +632,9 @@
 	return true;
     }
     m_display = msg->getIEValue(ISDNQ931IE::Display,"display");
+    if (m_display.null()) {
+    	m_display = msg->getIEValue(ISDNQ931IE::Facility,"facility-qsig-calling-name");
+    }
     return !m_display.null();
 }
 
@@ -3842,6 +3933,7 @@
 	{"Call identity",               CallIdentity},
 	{"Call state",                  CallState},
 	{"Channel identification",      ChannelID},
+	{"Facility",			Facility},
 	{"Progress indicator",          Progress},
 	{"Network-specific facilities", NetFacility},
 	{"Notification indicator",      Notification},
@@ -4506,6 +4598,12 @@
 	{0,0,0}
 	};
 
+static const IEParam s_ie_ieFacility[] = {
+	{"facility-qsig-calling-name",    0x7f, 0},        // callingName snatched from qsig PDU
+	{0,0,0}
+	};
+
+
 // *** Q.931 4.5.23: Progress indication
 
 // Progress description: Bits 0-6
@@ -5061,6 +5159,7 @@
 	CASE_DECODE_IE(ISDNQ931IE::CallIdentity,decodeCallIdentity)
 	CASE_DECODE_IE(ISDNQ931IE::CallState,decodeCallState)
 	CASE_DECODE_IE(ISDNQ931IE::ChannelID,decodeChannelID)
+	CASE_DECODE_IE(ISDNQ931IE::Facility,decodeFacility)
 	CASE_DECODE_IE(ISDNQ931IE::Progress,decodeProgress)
 	CASE_DECODE_IE(ISDNQ931IE::NetFacility,decodeNetFacility)
 	CASE_DECODE_IE(ISDNQ931IE::Notification,decodeNotification)
@@ -5683,6 +5782,144 @@
     return ie;
 }
 
+static inline bool is_rose_invoke(u_int8_t ber_class, bool pc, u_int32_t tag)
+{
+	return ((ber_class == BER_CLASS_CON) && (tag == 1));
+}
+
+static inline bool is_invoke_id(u_int8_t ber_class, bool pc, u_int32_t tag)
+{
+	return ((ber_class == BER_CLASS_UNI) && 
+			(pc == false) && 
+			((tag == 2) || (tag == 5)));
+}
+
+static inline bool is_opcode(u_int8_t ber_class, bool pc, u_int32_t tag)
+{
+	return ((ber_class == BER_CLASS_UNI) && 
+		(pc == false) &&
+		(tag == 2));
+}
+
+static inline bool is_linkedId(u_int8_t ber_class, bool pc, u_int32_t tag)
+{
+	return ((ber_class == BER_CLASS_CON) && 
+		(tag == 0));
+}
+
+static inline bool is_simple_NameArg(u_int8_t ber_class, bool pc, u_int32_t tag)
+{
+	return ((ber_class == BER_CLASS_CON) && 
+		((tag == 0) || (tag == 2)));
+}
+
+// We try to snatch Q.SIG callingName element from th facility IE data
+// everything beyond that will be discarded and ingored
+ISDNQ931IE* Q931Parser::decodeFacility(ISDNQ931IE* ie, const u_int8_t* data,
+	u_int32_t len)
+{
+	int offset;
+	int maxlen;
+	int hoffset;
+	u_int32_t hlen;
+	u_int8_t appclass;
+	bool pc;
+	bool ind = false;
+	u_int32_t tag;
+	u_int32_t v_len;
+	int	value;
+	unsigned int	i;
+	DebugEnabler *dbg;
+	
+	dbg = m_settings->m_dbg;
+	if (len < 1) return errorParseIE(ie,s_errorNoData,0,0);
+	offset = 1;	//skip protocol profile
+	maxlen = len;
+	
+	XDebug(dbg,DebugAll, "about to parse facility IE - first byte=0x%0x, length=%u", *data, len);
+	while (offset < maxlen) {
+		XDebug(dbg,DebugAll, "Looking for ROSE invoke");
+		offset = get_ber_identifier(data, offset, maxlen, &appclass, &pc, &tag, dbg);
+		offset = get_ber_length(data, offset, maxlen, &v_len, &ind, dbg);
+		if (ind) break;
+		hoffset = offset;
+		hlen = v_len;
+		if (!is_rose_invoke(appclass, pc, tag) || (offset >= maxlen)) goto skip_upper;
+	
+		XDebug(dbg,DebugAll, "Looking for invoke ID");
+		offset = get_ber_identifier(data, offset, maxlen, &appclass, &pc, &tag, dbg);
+		offset = get_ber_length(data, offset, maxlen, &v_len, &ind, dbg);
+		if (ind) break;	
+
+		if (!is_invoke_id(appclass, pc, tag) || (offset >= (hoffset + (int)hlen)) ) goto skip_upper;
+		offset += v_len;	//skip invoke id
+		
+		XDebug(dbg,DebugAll, "Looking for opcode or linkedID");
+		//get next TLV. May be opcode or linkedId
+		offset = get_ber_identifier(data, offset, maxlen, &appclass, &pc, &tag, dbg);
+		offset = get_ber_length(data, offset, maxlen, &v_len, &ind, dbg);
+		if (ind) break;
+			
+		if (offset+v_len >= hoffset + hlen) goto skip_upper;
+		if (!is_opcode(appclass, pc, tag)) { 
+				offset += v_len;	//skip it. May be a linked Id
+				XDebug(dbg,DebugAll, "Linked id skipped, looking for opcode");
+				offset = get_ber_identifier(data, offset, maxlen, &appclass, &pc, &tag, dbg);
+				offset = get_ber_length(data, offset, maxlen, &v_len, &ind, dbg);
+				if (ind) break;
+				if (!is_opcode(appclass, pc, tag)) goto skip_upper;
+		}
+		//opcode must be found at this point.
+		if (offset+v_len >= hoffset+hlen) goto skip_upper;
+		if (v_len > 4) goto skip_upper;
+		value = 0;
+		if (data[offset] & 0x80) value = -1;
+		for (i = 0; i < v_len; i++) {
+			value = (value << 8) | data[offset + i];
+		}
+		XDebug(dbg,DebugAll, "Opcode value=%d (must be 0)", value);
+
+		if (value) goto skip_upper;	//not a callingName opcode
+		offset += v_len;
+		
+		//we are at argument now
+		offset = get_ber_identifier(data, offset, maxlen, &appclass, &pc, &tag, dbg);
+		offset = get_ber_length(data, offset, maxlen, &v_len, &ind, dbg);
+		if (ind) break;
+	
+		XDebug(dbg, DebugAll, "About to snatch callingName: offset=%u, v_len=%u, hoffset=%u, hlen=%u",
+				offset, v_len, hoffset, hlen);
+		if (is_simple_NameArg(appclass, pc, tag) && ((offset + (int)v_len) <= (hoffset + (int)hlen)) && (v_len > 0)) {
+			//finaly got ya!
+			s_ie_ieFacility[0].dumpDataBit7(ie, &data[offset], v_len, false);
+			offset = hoffset + hlen;
+			break;  //YESS!
+		}
+
+skip_upper:	
+		Debug(dbg,DebugAll, "Disregarded TLV data in facility IE at offset %d, class=%0u, pc=%u, tag=%0u",
+			offset, appclass, pc, tag);
+		offset = hoffset + hlen;
+	}
+    	if (ind) {
+    		Debug(dbg,DebugAll, "indefinite length TLV in facility IE at offset=%d", offset);
+    	}
+//	if (offset < maxlen) {
+//		SignallingUtils::dumpData(0,*ie,"garbage",data + offset,len - offset);
+//	}
+#if 0	
+/    String tmp;
+    tmp.hexify((void *)data,len,' ');
+    XDebug(dbg,DebugAll,"Decoded Facility IE: len=%u, data=%s",
+	len,tmp.c_str());
+//    if (crt < len)
+//	SignallingUtils::dumpData(0,*ie,"garbage",data + crt,len - crt);
+//    return ie;
+#endif
+    return ie;
+}
+
+
 void Q931Parser::decodeLayer1(ISDNQ931IE* ie, const u_int8_t* data, u_int32_t len,
 	u_int8_t& crt, const IEParam* ieParam, u_int8_t ieParamIdx)
 {
